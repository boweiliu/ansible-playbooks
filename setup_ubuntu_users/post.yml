---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml
    - vars/secret.yml

  tasks:
# repo-specific stuff
    - name: Cargo install wasm pack
      community.general.cargo:
        name: wasm-pack
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Cargo install watch
      community.general.cargo:
        name: cargo-watch
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Create code dir
      ansible.builtin.file:
        path: /home/{{ create_user }}/code
        state: directory
        mode: '0755'
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: run command to upload ssh pub key
      shell: |
        curl -H "Authorization: token {{ github_token }}" --data '{"title":"test-key","key":"'"$(cat ~/.ssh/id_rsa.pub)"'"}' https://api.github.com/user/keys
      register: shell
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: debug
      debug: var=shell.stdout_lines

    - name: Add a setting to ~/.gitconfig
      community.general.git_config:
        name: user.email
        scope: global
        value: liubowei@gmail.com
      vars:
        ansible_become_user: "{{ create_user }}"

          # see https://github.com/ansible/ansible/issues/75315    
    - name: Add a setting to ~/.gitconfig
      community.general.git_config:
        name: user.name
        scope: global
        value: Bowei Liu
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Git checkout
      ignore_errors: true
      ansible.builtin.git:
        repo: 'https://github.com/boweiliu/wasm-game-of-life.git'
        dest: /home/{{ create_user }}/code/wasm-game-of-life
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Git set remote
      ignore_errors: true
      community.general.git_config:
        scope: local
        repo: /home/{{ create_user }}/code/wasm-game-of-life
        name: remote.origin.url
        value: git@github.com:boweiliu/wasm-game-of-life
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Git checkout this
      ignore_errors: true
      ansible.builtin.git:
        repo: 'https://github.com/boweiliu/ansible-playbooks.git'
        dest: /home/{{ create_user }}/code/ansible-playbooks
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Git set remote this
      ignore_errors: true
      community.general.git_config:
        scope: local
        repo: /home/{{ create_user }}/code/ansible-playbooks
        name: remote.origin.url
        value: git@github.com:boweiliu/ansible-playbooks
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: setup vim plugin
      args:
        creates: /home/"{{ create_user }}"/.vim/autoload/plug.vim
      shell: |
        curl -fLo /home/{{ create_user }}/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Create vimrc
      ansible.builtin.file:
        path: /home/{{ create_user }}/.vimrc
        state: touch
        mode: '0644'
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: populate vimrc
      lineinfile:
        path: /home/{{ create_user }}/.vimrc
        regexp: |
          Prerequisites
        line: |
          " Prerequisites:
          " - vim-plug: https://github.com/junegunn/vim-plug
          " - For tagbar: a tag generator (i.e. apt-get install exuberant-ctags)
          
          " Steps:
          " - :PlugInstall
          " - Restart
          
          call plug#begin('~/.vim/plugged')
          
          " Syntastic is a syntax checking plugin
          " It runs files through external syntax checkers and displays any
          " resulting errors to the user
          Plug 'scrooloose/syntastic'
          
          " Tagbar will generate tags in memory, allowing you to navitage to
          " structs, functions, etc. In the current file
          Plug 'preservim/tagbar'
          
          " Rust file detection, syntax highlighting, formatting,
          " Syntastic integration, and more
          Plug 'rust-lang/rust.vim'
          
          call plug#end()
          
          syntax enable
          filetype plugin indent on
          
          " Toggle tagbar
          nmap <F8> :TagbarToggle<CR>

    - name: load vim plugins
      shell: |
        vim  -c ':PlugInstall' -c ':q!' -c ':q!'
      vars:
        ansible_become_user: "{{ create_user }}"
