#################################################
# DO Community Playbooks: Initial Server Setup
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

# Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        generate_ssh_key: yes
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user from controller
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Set other authorized keys
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: '{{ item }}'
      with_file:
        - public_keys/work-laptop.pub
        - public_keys/boweis-macbook-pro.pub
        - public_keys/boweis-windows-sha256.pub

    - name: Create a ssh key for the new user
      user:
        name: "{{ create_user }}"
        generate_ssh_key: yes

    - name: Slurp the newly generated remote ssh key
      slurp:
        src: /home/{{ create_user }}/.ssh/id_rsa.pub
      register: slurpfile
 
# necessary to ssh into itself
    - name: Set authorized key for newly generated remote host key on remote host itself
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ slurpfile['content'] | b64decode }}"

    - name: Disable ssh for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: add own fingerprint to known_hosts
      shell: |
        ssh-keyscan -H localhost >> ~/.ssh/known_hosts
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Reload ssh service
      service: name=ssh state=reloaded

# c setup
    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

    - name: Install tailscale - add repository keys
      ansible.builtin.apt_key:
        url: https://pkgs.tailscale.com/stable/ubuntu/focal.gpg
        state: present

    - name: Install tailscale - update sources list
      ansible.builtin.get_url:
        url: https://pkgs.tailscale.com/stable/ubuntu/focal.list
        dest: /etc/apt/sources.list.d/tailscale.list

    - name: Install tailscale - apt update and install tailscale
      ansible.builtin.apt:
        update_cache: yes
        state: latest
        name: 
          - tailscale

    - name: Install gcc
      ansible.builtin.apt:
        update_cache: yes
        state: latest
        name: 
          - build-essentials


# pip setup
    - name: Download get-pip
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /etc/get-pip.py

    - name: Run get-pip (idempotent shell command)
      shell: |
        python3 -m pip --version || python3 /etc/get-pip.py

    - name: install ansible
      shell: |
        python3 -m pip install -U ansible

# pyenv setup
    - name: Download pyenv installer
      get_url:
        url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
        dest: /etc/pyenv-installer

    - name: Run pyenv-installer (idempotent shell command)
      shell: |
        ls /home/"{{ create_user }}"/.pyenv || bash /etc/pyenv-installer
      args:
        creates: /home/"{{ create_user }}"/.pyenv/README.md
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Run pyenv install py3.10
      shell: |
        /home/"{{ create_user }}"/.pyenv/bin/pyenv install 3.10.4
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Add pyenv to .profile
      lineinfile: |
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

        
    - name: Add pyenv to .bashrc
      lineinfile:
eval "$(pyenv init -)"


# pdm setup
    - name: Download install pdm
      get_url:
        url: https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py
        dest: /etc/install-pdm.py

    - name: Run install pdm (idempotent shell command)
      shell: |
        pdm --version || python3 /etc/install-pdm.py
      vars:
        ansible_become_user: "{{ create_user }}"


    - name: Download pip installer
      get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /etc/get-pip.py

    - name: Run pip install for 3.9
      shell: |
        python3.9 /etc/get-pip.py
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Run pip install aws
      shell: |
        python3 -m pip install -U awscli
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Download node installer
      get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh
        dest: /etc/install-nvm.sh

    - name: fuckit, nvm install instead
      shell: |
        bash /etc/install-nvm.sh
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: install node 16
      shell: |
        /bin/bash -i -c 'nvm install 16.13.2'
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: install yarn
      shell: |
        /bin/bash -i -c 'npm install -g yarn http-server'
      vars:
        ansible_become_user: "{{ create_user }}"

