#################################################
# DO Community Playbooks: Initial Server Setup
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

# Sudo Group Setup
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        generate_ssh_key: yes
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user from controller
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Set other authorized keys
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: '{{ item }}'
      with_file:
        - public_keys/work-laptop.pub
        - public_keys/boweis-macbook-pro.pub

    - name: Create a ssh key for the new user
      user:
        name: "{{ create_user }}"
        generate_ssh_key: yes

    - name: Slurp the newly generated remote ssh key
      slurp:
        src: /home/{{ create_user }}/.ssh/id_rsa.pub
      register: slurpfile
 
# necessary to ssh into itself
    - name: Set authorized key for newly generated remote host key on remote host itself
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ slurpfile['content'] | b64decode }}"

    - name: Disable ssh for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: add own fingerprint to known_hosts
      shell: |
        ssh-keyscan -H localhost >> ~/.ssh/known_hosts
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Reload ssh service
      service: name=ssh state=reloaded

# Install Packages
    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

# Setup vnc server
    - name: Copy VNC service file, optional
      copy: src=files/vncserver@.service dest=/etc/systemd/system/vncserver@.service owner=root group=root mode=0644

    - name: Create vnc dir root
      file:
        path: ~/.vnc
        mode: 0755
        state: directory

    - name: Create vnc dir user
      file:
        path: ~/.vnc
        mode: 0755
        state: directory
      vars:
        ansible_become_user: "{{ create_user }}"
      
    - name: Generate random passwd root
      shell: |
        head -c8 /dev/urandom | md5sum | head -c8 | vncpasswd -f > ~/.vnc/passwd

    - name: Generate random passwd user
      shell: |
        head -c8 /dev/urandom | md5sum | head -c8 | vncpasswd -f > ~/.vnc/passwd
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Update file perms root
      file:
        path: ~/.vnc/passwd
        mode: 0600

    - name: Update file perms user
      file:
        path: ~/.vnc/passwd
        mode: 0600
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Copy VNC startup script root
      copy: src=files/xstartup dest=~/.vnc/xstartup mode=0644

    - name: Copy VNC startup script user
      copy: src=files/xstartup dest=~/.vnc/xstartup mode=0644
      vars:
        ansible_become_user: "{{ create_user }}"

    - name: Reload vnc service
      service: name=vncserver@1 state=started daemon_reload=yes

# UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming
